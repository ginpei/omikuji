{"version":3,"sources":["components/misc.js","components/Omikuji.js","App.js","serviceWorker.js","index.js"],"names":["styled","div","_templateObject","CenterBox","_templateObject2","OmikujiContainer","Omikuji_templateObject","OmikujiButton","button","Omikuji_templateObject2","OmikujiResult","_templateObject3","Omikuji","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","result","onOmikujiClick","bind","assertThisInitialized","name","react_default","a","createElement","console","warn","Error","onClick","event","getOracle","setState","possibilities","omikujiPossibilities","wholeWeight","reduce","v","weight","rand","Math","floor","random","currentWeight","NaN","React","Component","App","className","components_Omikuji","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+iBAEyBA,IAAOC,IAAVC,KAAf,IAMMC,EAAYH,IAAOC,IAAVG,4pBCJtB,IAAMC,EAAmBL,YAAOG,EAAPH,CAAHM,KAIhBC,EAAgBP,IAAOQ,OAAVC,KAIbC,EAAgBV,YAAOG,EAAPH,CAAHW,KAyFJC,cA3Eb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,OAAQ,MAEVR,EAAKS,eAAiBT,EAAKS,eAAeC,KAApBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KALLA,wEAQV,IACCQ,EAAWL,KAAKI,MAAhBC,OACR,GAAIA,EACF,OAAQA,EAAOI,MACb,IAAK,WACH,OACEC,EAAAC,EAAAC,cAACxB,EAAD,KACEsB,EAAAC,EAAAC,cAACnB,EAAD,sBAGN,IAAK,QACH,OACEiB,EAAAC,EAAAC,cAACxB,EAAD,KACEsB,EAAAC,EAAAC,cAACnB,EAAD,gBAGN,IAAK,SACH,OACEiB,EAAAC,EAAAC,cAACxB,EAAD,KACEsB,EAAAC,EAAAC,cAACnB,EAAD,sBAGN,QAEE,MADAoB,QAAQC,KAAK,SAAUT,GACjB,IAAIU,MAAM,kBAItB,OACEL,EAAAC,EAAAC,cAACxB,EAAD,KACEsB,EAAAC,EAAAC,cAACtB,EAAD,CACE0B,QAAShB,KAAKM,gBADhB,oEASSW,GACb,IAAMZ,EAASL,KAAKkB,YACpBlB,KAAKmB,SAAS,CAAEd,+CAQhB,IAIIA,EAJEe,EAAgBpB,KAAKJ,MAAMyB,qBAC3BC,EAAcF,EAAcG,OAAO,SAACZ,EAAGa,GAAJ,OAAWb,EAAIa,EAAEC,QAAQ,GAC5DC,EAAOC,KAAKC,MAAMD,KAAKE,SAAWP,GAYxC,OATAF,EAAcG,OAAO,SAACE,EAAQD,GAC5B,IAAMM,EAAgBL,EAASD,EAAEC,OACjC,OAAIC,EAAOI,GACTzB,EAASmB,EACFO,KAEFD,GACN,GAEIzB,SAxEW2B,IAAMC,WCtBtBZ,EAAuB,CAC3B,CACEZ,KAAM,WACNgB,OAAQ,IAEV,CACEhB,KAAM,QACNgB,OAAQ,IAEV,CACEhB,KAAM,SACNgB,OAAQ,KAuBGS,cAlBb,SAAAA,EAAYtC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkC,IACjBrC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoC,GAAA/B,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,OAAQ,GAHOR,wEAQjB,OACEa,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,OACbzB,EAAAC,EAAAC,cAACwB,EAAD,CACEf,qBAAsBA,YAZdW,IAAMC,WCNJI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2c6686b6.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\nmax-width: calc(800px - 2rem);\npadding-left: 1rem;\npadding-right: 1rem;\n`;\n\nexport const CenterBox = styled.div`\nalign-items: center;\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { CenterBox } from \"./misc\";\n\nconst OmikujiContainer = styled(CenterBox)`\n  font-size: calc(10px + 2vmin);\n  min-height: 100vh;\n`;\nconst OmikujiButton = styled.button`\n  height: 80vmin;\n  width: 80vmin;\n`;\nconst OmikujiResult = styled(CenterBox)`\n  animation: shake 100ms infinite step-start;\n  font-size: 45vmin;\n\n  @keyframes shake {\n    0% { transform: translate(1vmin, 1.5vmin); }\n    25% { transform: translate(-1.5vmin, 1.5vmin); }\n    50% { transform: translate(-1.5vmin, -1vmin); }\n    75% { transform: translate(1vmin, -1vmin); }\n    100% { transform: translate(1vmin, 1.5vmin); }\n  }\n`;\n\nclass Omikuji extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      result: null,\n    };\n    this.onOmikujiClick = this.onOmikujiClick.bind(this);\n  }\n\n  render() {\n    const { result } = this.state;\n    if (result) {\n      switch (result.name) {\n        case 'daikichi':\n          return (\n            <OmikujiContainer>\n              <OmikujiResult>大吉</OmikujiResult>\n            </OmikujiContainer>\n          );\n        case 'kichi':\n          return (\n            <OmikujiContainer>\n              <OmikujiResult>吉</OmikujiResult>\n            </OmikujiContainer>\n          );\n        case 'daikyo':\n          return (\n            <OmikujiContainer>\n              <OmikujiResult>大凶</OmikujiResult>\n            </OmikujiContainer>\n          );\n        default:\n          console.warn('Result', result);\n          throw new Error('Unknown result');\n      }\n    }\n\n    return (\n      <OmikujiContainer>\n        <OmikujiButton\n          onClick={this.onOmikujiClick}\n        >\n          おみくじ\n        </OmikujiButton>\n      </OmikujiContainer>\n    );\n  }\n\n  onOmikujiClick(event) {\n    const result = this.getOracle();\n    this.setState({ result });\n  }\n\n  getOracle() {\n    // --------->               = rand\n    // +------+----------+----+ = wholeWeight\n    // ^大吉  ^吉        ^大凶\n\n    const possibilities = this.props.omikujiPossibilities;\n    const wholeWeight = possibilities.reduce((a, v) =>  a + v.weight, 0);\n    const rand = Math.floor(Math.random() * wholeWeight);\n\n    let result;\n    possibilities.reduce((weight, v) => {\n      const currentWeight = weight + v.weight;\n      if (rand < currentWeight) {\n        result = v;\n        return NaN;\n      }\n      return currentWeight;\n    }, 0);\n\n    return result;\n  }\n}\n\nexport default Omikuji;\n","import React from 'react';\nimport Omikuji from \"./components/Omikuji\";\n\nconst omikujiPossibilities = [\n  {\n    name: 'daikichi',\n    weight: 30,\n  },\n  {\n    name: 'kichi',\n    weight: 50,\n  },\n  {\n    name: 'daikyo',\n    weight: 20,\n  },\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      result: 0,\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Omikuji\n          omikujiPossibilities={omikujiPossibilities}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}